[{"title":"ROSJava环境搭建","url":"/2018/11/12/ROSJava环境搭建/","content":"\nROS (Robot Operating System) 是在2010年发布的开源机器人操作系统。\n\nRosJava 是用 Java实现的 ROS，它提供了一个客户端库用于快速调用 ROS的 Topics, Services 和Parameters，我们可以用它在 Android 上进行 RosJava的开发。\n\n资料分享: Ros官网: http://wiki.ros.org/\n\t\tRosJava官方文档: http://wiki.ros.org/rosjava\n\n\n## 1.ROS环境搭建\nROS Kinetic支持 Xenial (16.04)和 Wily(15.10)，其它 Linux 系统需要安装其它的 ROS版本。\n下面开始在 Ubuntu 16.0.4上搭建 ROS Kinetic开发环境。\n\n参考资料: http://wiki.ros.org/kinetic\n\t\t  http://wiki.ros.org/kinetic/Installation/Ubuntu\n\n### 使用下面命令：\n\n    ~$ sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list'\n    \n![](/images/ROSJava环境搭建/001.png)\n\n2.2 设置keys\n\n    ~$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 0xB01FA116\n\n![](/images/ROSJava环境搭建/002.png)\n\n2.3 安装\n\n    ~$ sudo apt-get update\n\n    ~$ sudo apt-get install ros-kinetic-desktop-full\n\n安装功能包：\n\n    ~$ sudo apt-get install ros-kinetic-slam-gmapping\n\n查找在kinetic中可以使用的功能包：\n\n    ~$ apt-cache search ros-kinetic\n\n2.4 初始化\n\n    ~$ sudo rosdep init\n\n    ~$ rosdep update\n\n2.5 环境配置\n\n    ~$ echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc\n\n    ~$ source ~/.bashrc\n\n注意当安装多个ROS发行版，使用kinetic需要用到下面命令：\n\n    ~$ source /opt/ros/kinetic/setup.bash\n\n2.6 安装rosinstall\n\n    ~$ sudo apt-get install python-rosinstall\n\n2.7 测试roscore\n\n    ~$ roscore\n\n![](/images/ROSJava环境搭建/003.png)\n\n\n安装ROS成功后,在Beginner Tutorials中有一个简单的示例程序.\n\n![](/images/ROSJava环境搭建/004.png)\n\n\n在Terminal中运行以下命令： \n\n    $ roscore\n\n新开一个terminal，运行以下命令，打开小乌龟窗口： \n\n    $ rosrun turtlesim turtlesim_node\n\n\n新开一个terminal，运行以下命令，打开乌龟控制窗口，可使用方向键控制乌龟运动： \n\n\n    $ rosrun turtlesim turtle_teleop_key\n\n\n选中控制窗口，按方向键，可看到小乌龟窗口中乌龟在运动。\n新开一个terminal，运行以下命令，可以看到ROS的图形化界面，展示结点的关系： \n\n\n    $ rosrun rqt_graph rqt_graph\n\n至此，测试完成，ROS成功\n\n\n\n2.RosJava环境搭建 \n\n在 Ros环境搭建完成后搭建 RosJava 环境。\n\n参考资料: http://wiki.ros.org/rosjava/Tutorials/kinetic/Source%20Installation\n\t\t  https://blog.csdn.net/F_season/article/details/9166133\n\n使用下面命令：\n1.安装依赖\n$ sudo apt-get install ros-kinetic-catkin ros-kinetic-rospack python-wstool openjdk-8-jdk\n\n2.核心功能\n$ mkdir -p ~/rosjava/src\n$ wstool init -j4 ~/rosjava/src https://raw.githubusercontent.com/rosjava/rosjava/kinetic/rosjava.rosinstall\n$  source /opt/ros/kinetic/setup.bash\n$  cd ~/rosjava\n$  rosdep update\n$  rosdep install --from-paths src -i -y\n$  catkin_make\n\n3.配置 .bashrc文件\n在.bashrc 文件里设置 Ros的环境变量，不设置的话 ROS和 RosJava Android\n间的通讯不能连通。\n\nLinux系统里打开终端，输入命令:\n$ gedit ~/.bashrc\n\n![](/images/ROSJava环境搭建/005.png)\n\n在最后一行添加三个 export语句\nexport ROS_HOSTNAME=192.168.199.141\nexport ROS_IP=192.168.199.141\nexport ROS_MASTER_URL=http://192.168.199.141:11311\n\n把IP地址改成自己本机连接网络的IP地址，之后手机和安装Linux的ROS系统需要连接在同一个网络\n\n\n3.在 Android中使用ROS\n在Mac上搭建好 Android开发环境，安装好Android Studio，配置好翻墙网络。\n通过给Android App添加上ROS的依赖库，可以在没有ROS环境的Mac上开发ROS客户端。\n\n参考资料:\nhttp://community.bwbot.org/topic/627/%E5%9C%A8android%E4%B8%AD%E4%BD%BF%E7%94%A8ros\n\n1.创建一个 Android App项目\n\n![](/images/ROSJava环境搭建/006.png)\n\n![](/images/ROSJava环境搭建/007.png)\n\n然后点击Finish\n\n等待项目同步完成。一般这里出问题就是网络没有配置好，需要开翻墙软件。\n\n\n2.修改 build.gradle文件\n\n项目同步完成之后，在项目左侧的文件列表内会有两个build.gradle文件。其中一个是Project的，另一个是Module的。\n\n![](/images/ROSJava环境搭建/008.png)\n\n首先修改Project的build.gradle文件\n\n把文件中的\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.2.3'\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n修改为\n\nbuildscript {\n  apply from: \"https://github.com/rosjava/android_core/raw/kinetic/buildscript.gradle\"\n}\n然后在文件中添加\n\nsubprojects {\n    apply plugin: 'ros-android'\nDo not place your applica\n    afterEvaluate { project ->\n        android {\n            // Exclude a few files that are duplicated across our dependencies and\n            // prevent packaging Android applications.\n            packagingOptions {\n                exclude \"META-INF/LICENSE.txt\"\n                exclude \"META-INF/NOTICE.txt\"\n            }\n        }\n    }\n}\n然后修改Module的build.gradle，在dependencies 中添加ros依赖\n\n...\ndependencies {\n    ...\n    // You now now add any rosjava dependencies, like so:\n    compile 'org.ros.android_core:android_10:[0.3,0.4)'\n}\n...\n同时把dependencies 中的 全部implementation修改为compile。注意修改时的大小写。\n\n把文件中的compileSdkVersion版本设置为25\ntargetSdkVersion也设置为25\n把 com.android.support:appcompat-v7:27.1.1也修改成25的版本\n\n最后修改完成的文件如下面所示\n\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 25\n    defaultConfig {\n        applicationId \"org.bwbot.rostest\"\n        minSdkVersion 15\n        targetSdkVersion 25\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:25.4.0'\n    compile 'com.android.support.constraint:constraint-layout:1.1.3'\n    testCompile 'junit:junit:4.12'\n    androidTestCompile 'com.android.support.test:runner:1.0.2'\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:3.0.2'\n    compile 'org.ros.android_core:android_10:[0.3,0.4)'\n}\n\n3.修改AndroidManifest.xml文件\n此时如果编译项目会出现下面的错误\n\nManifest merger failed : Attribute application@icon value=(@mipmap/ic_launcher) from AndroidManifest.xml:7:9-43\n\tis also present at [org.ros.android_core:android_10:0.3.3] AndroidManifest.xml:19:9-36 value=(@mipmap/icon).\n\tSuggestion: add 'tools:replace=\"android:icon\"' to <application> element at AndroidManifest.xml:5:5-19:19 to override.\n此时需要修改AndroidManifest.xml文件在application项目中做如下修改\n\n<application xmlns:tools=\"http://schemas.android.com/tools\"\n        tools:replace=\"android:icon\"\n        ...\n为了能够正常使用还需要给app添加网络权限。在AndroidManifest.xml文件中添加\n\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n最后的AndroidManifest.xml文件如下\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.bwbot.rostest\">\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <application\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        tools:replace=\"android:icon\"\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n</manifest>\n此时项目已经可以成功编译了。\n\n2. 写一个简单的消息发布程序\nMainActivity.java内容如下\n\npackage org.bwbot.rostest;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\n\nimport org.ros.android.RosActivity;\nimport org.ros.concurrent.CancellableLoop;\nimport org.ros.namespace.GraphName;\nimport org.ros.node.ConnectedNode;\nimport org.ros.node.Node;\nimport org.ros.node.NodeConfiguration;\nimport org.ros.node.NodeMain;\nimport org.ros.node.NodeMainExecutor;\nimport org.ros.node.topic.Publisher;\n\nimport java.net.URI;\n\nimport std_msgs.String;\n\npublic class MainActivity extends RosActivity {\n\n    protected MainActivity() {\n        super(\"ros_test\", \"ros_test\", URI.create(\"http://192.168.0.23:11311\")); // 这里是ROS_MASTER_URI\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    protected void init(NodeMainExecutor nodeMainExecutor) {\n        NodeConfiguration nodeConfiguration = NodeConfiguration.newPublic(getRosHostname());\n        nodeConfiguration.setMasterUri(getMasterUri());\n        nodeMainExecutor.execute(new NodeMain() {\n            @Override\n            public GraphName getDefaultNodeName() {\n                return GraphName.of(\"ros_test\");\n            }\n\n            @Override\n            public void onStart(ConnectedNode connectedNode) {\n                final Publisher<std_msgs.String> pub =  connectedNode.newPublisher(\"/test\", String._TYPE);\n                connectedNode.executeCancellableLoop(new CancellableLoop() {\n                    @Override\n                    protected void loop() throws InterruptedException {\n                        std_msgs.String msg = pub.newMessage();\n                        msg.setData(\"hello world\");\n                        pub.publish(msg);\n                        Thread.sleep(1000);\n                    }\n                });\n            }\n\n            @Override\n            public void onShutdown(Node node) {\n\n            }\n\n            @Override\n            public void onShutdownComplete(Node node) {\n\n            }\n\n            @Override\n            public void onError(Node node, Throwable throwable) {\n\n            }\n        }, nodeConfiguration);\n    }\n}\n\n编译后，在手机上运行App，在运行的ROS的主机上打印/test话题。\n\n手机要和Linux机器连接在同一个 Wi-Fi下，Linux上已修改 .bashrc文件，添加本机 IP。\nAndroid程序中已配置ROS_MASTER_URL 地址。\n\n在 Linux 上新开一个 Terminal中运行以下命令： \n$ roscore\n新开一个terminal，cd 到 rosjava文件夹中，运行命令:\n$ ros topic echo /test\n\n![](/images/ROSJava环境搭建/009.png)\n\n可以看到消息已经成功发送出来了。\n到这Anroid端和Linux端的ROS通讯成功。\n","tags":["Technology","Original"],"categories":["开发"]},{"title":"Some feature of Objective-C","url":"/2016/08/12/SomefeatureofObjective-C/","content":"\n## 1.AppDelegate.h and AppDelegate.m\nWhen the application is created there are AppDelegate.h files and AppDelegate.m files by default. AppDelegateis a proxy for the whole application, it provides a monitoring interface to setting the program when it’s in the start, background, exit and active.\n\n## 2.Class methods and instance methods\nThere are two types of methods in Objective-C: class methods and instance methods. Like “ - (void) setnumber: (int) n; “ that begin with symbol “-“ means that the\nmethod is an instance methods. Instance methods are some of the operations performed on a particular instance of a class. For example, there is a white rabbit, it’s weight has increasted. We can define a instanse methods of weught to reflect the weight change of the white rabbit.\n\nClass methods are some of the operations performed on the class itself. For example, we create a new calss, this method is class methods.\n\n\n\n\n\n\n\n","tags":["Technology","Original"],"categories":["开发"]},{"title":"Some algorithms of iOS","url":"/2016/07/30/SomeAlgorithmsOfiOS/","content":"\nThis article to share some common algorithms used in iOS, Let’s take a look for it!\n\n##1.Sorting the following set of data in descending order(Bubble Sort) “23, 16, 84, 12, 8, 54, 75, 44, 4, 62”\n\n<!-- more --> \n\n```bash\nint main(int argc, char *argv[]) {\n\t\n\tint array[10] = {23, 16, 84, 12, 8, 54, 75, 44, 4, 62};\n\tint num = sizeof(array)/sizeof(int);\n\tfor (int i = 0; i < num-1; i++) {\n\t\tfor (int j = 0; j < num - 1 -i; j++) {\n\t\t\tif (array[j] < array[j+1]) {\n\t\t\t\tint tmp = array[j];\n\t\t\t\tarray[j] = array[j+1];\n\t\t\t\tarray[j+1] = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < num; i++) {\n\t\tprintf(\"%d\",array[i]);\n\t\tif(i == num-1) {\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t\telse {\n\t\t\tprintf(\" \");\n\t\t}\n\t}\n}\n```\nBubble sorting is a basic sorting algorithm. This algorithm will repeat the comparison of two adjacent elements in the array, if one element is larger (smaller) than the other, then the position of the two elements is exchanged. This comparison is repeated until the last element, this comparison will repeat n-1 trips, Each trip is compared n-j times, j is the number of elements that have been sorted. Each comparison finds the largest or smallest number of the unsorted elements, this is like a bubble floating from the bottom of the water one by one the same. Bubble sorting is a sorting method with high time complexity and low efficiency, the space complexity is O(n).\n\n##2.Sorting the following set of data in ascending order(Select Sort). “85, 36, 55, 28, 91, 72, 14, 62, 29, 7”\n```bash\nvoid sort(int a[],int n)\n{\n\tint i, j, index;\n\tfor (i=0;i<n-1;i++) {\n\t\tindex = i;\n\t\tfor (j=i+1; j<n; j++) {\n\t\t\tif (a[index]>a[j]) {\n\t\t\t\tindex=j;\n\t\t\t}\n\t\t}\n\t\tif(index != i) {\n\t\t\tint temp = a[i];\n\t\t\ta[i] = a[index];\n\t\t\ta[index] = temp;\n\t\t}\n\t}\n}\nint main(int argc, const char * argv[]) {\n\t\n\tint numArr[10] = {85, 36, 55, 28, 91, 72, 14, 62, 29, 7};\n\tsort(numArr, 10);\n\tfor (int i=0; i < 10; i++) {\n\t\tprintf(\"%d, \", numArr[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n```\n##3.Fast sorting algorithm\n```bash\nvoid sort(int *a, int left, int right) {\n\tif (left >= right) {\n\treturn ;\n}\nint i = left;\nint j = right;\nint key = a[left];\nwhile (i < j) {\n\twhile (i < j && key >= a[j]) {\n\tj --;\n}\na[i] = a[j];\nwhile (i < j && key <= a[i]) {\n\ti++;\n}\na[j] =a[i];\n}\na[i] = key;\nsort(a, left, i-1);\nsort(a, i+1, right);\n}\n```\nQuick sorting is an improvement in bubble sorting. Use bubble sort once to get the maximum value, if we select a value first, and then scan the sequence waiting to be sorted, a record smaller than this value and a record larger than that value are split into two separate sequences, and then the two sequences are respectively sorted by bubbling, this is quick sorting.\n\nWe call the selected value as the hub value, If the hub value is the maximum value in the sequence, then this trip quickly sorted become a bubble sort.\n\n##4.Dichotomy search\nThe dichotomy search only applies to the sorted sequence. If there is an array V has been arranged in ascending order, there are n = 20 elements in array V. There is an element X in the array V, how to know the location of X in the array V ?\n\nWe can use dichotomy search to solve this question:\n```bash\nint binsearch(int x, int v[], int n) {\n\tint low, hight, mid;\n\tlow = 0;\n\thigh = n-1;\nwhile(low <= high){\n\tmid = (low <= high)/2;\n\tif (x < v[mid])\n\t\thigh = mid - 1;\n\telse if (x > v[mid])\n\t\tlow = mid +1;\n\telse\n\t\treturn mid;\nprint (\"mid = %d, low = %d, high = %d\\n\", mid, low, high);\n}\n\treturn -1;\n}\n```\nOur idea is simple: The input value x is first compared to the middle element of the array v, if x is less than the middle element, the high value is set to the intermediate element - 1. Similarly, if x is more than the middle element, the low value is set to the middle element + 1. And then between low and high to find\n\n##5.How to achieve flip-linked list(List in reverse order)?\nIdeas: Put the second element at the top each time\n```bash\n#include <stdio.h>\n#include <stdlib.h>\ntype def struct NODE {\n\tint num;\n}\nnode *createLinkList (int length) {\n\tif (length <= 0) {\n\t\treturn NULL;\n\t}\n\tnode *head, *p, *q;\n\tint number = 1;\n\thead = (node *)malloc(sezeof(node));\n\thead -> next = head;\n\tp = q = head;\n\twhile (++number <= length) {\n\t\tp = (node *)malloc(sizeof(node));\n\t\tp -> num = number;\n\t\tp -> next = NULL;\n\t\tq -> next = p;\n\t\tq = p;\n\t}\n\treturn head;\n}\nvoid printLinkList(node *head) {\n\tif (head == NULL) {\n\treturn;\n\t}\n\tnode *p = head;\n\twhile (p) {\n\t\tprint(\"%d\", p->num);\n\t\tp = p -> next;\n\t}\n\tprintf(\"\\n\")\n}\nnode *reverseFunc1(node *head) {\n\tif (head == NULL) {\n\treturn head;\n\t}\n\tnode *p, *q;\n\tp = head;\n\tq = NULL;\n\twhile (p) {\n\t\tnode *pNext = p -> next;\n\t\tp -> next = q;\n\t\tq = p;\n\t\tp = pNext;\n\t}\n\treturn q;\n}\nint main (int argc, const char * argv[]) {\n\tnode *head = createLinkList(7);\n\tif (head) {\n\t\tprintLinkList(head);\n\t\tnode *reHead = reverseFunc1(head);\n\t\tprintLinkList(reHaed);\n\t}\tfree(reHead);\n\tfree(head);\n\treturn 0;\n}\n```\n","tags":["Technology","Original"]},{"title":"Use Jenkins On Mac","url":"/2016/07/23/UseJenkinsOnMac/","content":"\n##This page is a landing page for those who have installed Jenkins via its OS X installer.\n\nThe installer sets up Jenkins as a launch daemon, listening on port 8080.\n\n<!-- more --> \n\nThe launch daemon picks up the command line options from a standard preferences file, /Library/Preferences/org.jenkins-ci.plist If the fiel does not exist, built-in defaults are used. The preference files are manipulated using the standard utility defaults.\n\nTo view all settings in the file, run: defaults read /Library/Preferences/org.jenkins-ci\nTo get the value of a single setting, run: defaults read /Library/Preferences/org.jenkins-ci SETTING\nTo set the value of a setting, run:defaults write /Library/Preferences/org.jenkins-ci SETTING VALUE\nFor more information, see man defaults\n\n##Supported Settings\n\nThe list of settings supported by the Jenkins launch daemon(see document):\n\n1.prefix\n2.httpPort\n3.httpListenAddress\n4.httpsPort\n5.httpsListenAddress\n6.ajp13Port\n7.ajp13ListenAddress\n\nAdditionally, you can set also these:\n\n1.war (Full path name to jenkins.war file)\n2.heapSize (Passed to java command-line -Xmx parameter)\n3.permGen (Passed to java command-line -XX:MaxPermSize parameter)(SINCE 1.455?)\n4.JENKINS_HOME(Full path to JENKINS_HOME directory where Jenkins keeps its files)\n\n##Starting/stopping the service\n\nTo manaully start the daemon: sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\nTo manually stop the daemon: sudo launchctl unload /Library.LauchDaemons/org.jenkins-ci.plist\n\n##Starting/stopping the service\n\n1.To manually start the daemon: sudo launchct1 load /Library/LaunchDaemons/org.jenkins-ci.plist\n2.To manully stop the darmon: sudo launchct1 unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n##Inheriting your existing Hudson/Jenkins installation\n\nIf you’d like your new installation to take over your existing Jenkins/Hudson data, copy your old data directory into the new JENKINNS_HOME directory.\n\n##Java and OS X 10.9 Mavericks or 10.10 Yosemite\n\nOracle Java 8 on Mavericks or Yosemite needs Apple’s Java 1.6 to funciton. However, all of the symlinks in /usr/bin point to Java 1.6, so when a Jenkins tries to run via /Library/Application/Support/Jenkins/jenkins-runner.sh, it launches using Java 1.6. To run under Java 8, you need to do the following:\n\nInstall Apples’s Java from [official website](http://support.apple.com/kb/DL1572)\nInstall Oracle Java 8\nEdit jenkins-runner.sh:\na.Add the line:\n\n```bash\t\nexport JAVA_HOME=\"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home\"\n```\nb.Change the last two lines to read:\n```bash\necho \"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java\" $javaArgs -jar \"$war\" $args\nexec \"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java\" $javaArgs -jar \"$war\" $args\n```\nJenkins will now run using Java 8.\n\n##Uninstall jenkins\nTo uninstall Jenkins service from your Mac OS X computer, execute uninstall script from terminal:\n```bash\n'/Library/Application Support/Jenkins/Uninstall.command'\n```\n\n\n\n\n\n\n\n\n\n","tags":["Technology","Original"]},{"title":"Tag push and pull your image","url":"/2016/07/17/Tag, push, and pll your image/","content":"\nIn this section, you tag and push your docker-whale image to your newly created repository. When you are done, you test the repository by pulling your new image.\n\n#Step 1: Tag and push the image\nIf you don't already have a terminal open, open one now:\n\n1.Go back to your conmand line terminal.\n2.At the prompt, type docker images to list the images you current have:\n\n```bash\n$ docker images\n REPOSITORY           TAG          IMAGE ID            CREATED             SIZE\n docker-whale         latest       7d9495d03763        38 minutes ago      273.7 MB\n <none>               <none>       5dac217f722c        45 minutes ago      273.7 MB\n docker/whalesay      latest       fb434121fc77        4 hours ago         247 MB\n hello-world          latest       91c95931e552        5 weeks ago         910 B\n ```\n 3.Find the IMAGE ID for your docker-whale image.\n<!-- more --> \n In this example, the id is 7d9495d03763.\n ```bash\n Notice that currently, the `REPOSITORY` shows the repo name `docker-whale`\n but not the namespace. You need to include the `namespace` for Docker Hub to\n associate it with your account. The `namespace` is the same as your Docker\n Hub account name. You need to rename the image to\n `YOUR_DOCKERHUB_NAME/docker-whale`.\n ```\n1.Use IMAGE ID and the docker tag command to tag your docker-whale image. Of course, your account name will be your own. So, you type the command with your image's ID and your account name and press RETURN.\n```bash\n$ docker tag 7d9495d03763 maryatdocker/docker-whale:latest\n```\n2.Type the docker images command again to see yur newly tygged image.\n```bash\n$ docker images\n REPOSITORY                  TAG       IMAGE ID        CREATED          SIZE\n maryatdocker/docker-whale   latest    7d9495d03763    5 minutes ago    273.7 MB\n docker-whale                latest    7d9495d03763    2 hours ago      273.7 MB\n <none>                      <none>    5dac217f722c    5 hours ago      273.7 MB\n docker/whalesay             latest    fb434121fc77    5 hours ago      247 MB\n hello-world                 latest    91c95931e552    5 weeks ago      910 B\n ```\n 3.Use the docker login command to log into the Docekr Hub from the command line.\n THe format for the login command is:\n ```bash\n docker login\n ```\n When prompted, enter yoru password and press enter. So, for example:\n ```bash\n $ docker login\n Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.\n Username:\n Password:\n Login Succeeded\n ```\n 4.Type the docker push command to push your image to your new repository.\n ```bash\n $ docker push maryatdocker/docker-whale\n     The push refers to a repository maryatdocker/docker-whale(len: 1)\n     7d9495d03763: Image already exists\n     c81071adeeb5: Image successfully pushed\n     eb06e47a01d2: Image successfully pushed\n     fb434121fc77: Image successfully pushed\n     5d5bd9951e26: Image successfully pushed\n     99da72cfe067: Image successfully pushed\n     1722f41ddcb5: Image successfully pushed\n     5b74edbcaa5b: Image successfully pushed\n     676c4a1897e6: Image successfully pushed\n     07f8e8c5e660: Image successfully pushed\n     37bea4ee0c81: Image successfully pushed\n     a82efea989f9: Image successfully pushed\n     e9e06b06e14c: Image successfully pushed\n     Digest: sha256:ad89e88beb7dc73bf55d456e2c600e0a39dd6c9500d7cd8d1025626c4b985011\n```\n5.Return to your profile on Docker Hub to see your new image.\n\n#Step 2:Pull your new image\nIn this last section, you'll pull the image you just pushed to hub. Before you do that though, you will need to remove the original image from your local machine. If you left the original on your machine. Docker would not pull from the hub - why would it? The two images are identical.\n\n1.Make sure Docker is running, and open a commmand line terminal.\n2.At the prompt, type docker images to list the images you current have on your local machine.\n```bash\n$ docker images\n REPOSITORY                  TAG       IMAGE ID        CREATED          SIZE\n maryatdocker/docker-whale   latest    7d9495d03763    5 minutes ago    273.7 MB\n docker-whale                latest    7d9495d03763    2 hours ago      273.7 MB\n <none>                      <none>    5dac217f722c    5 hours ago      273.7 MB\n docker/whalesay             latest    fb434121fc77    5 hours ago      247 MB\n hello-world                 latest    91c95931e552    5 weeks ago      910 B\n ```\n To make a good test, you need to remove the maryatdocker/docker-whale and docker-whale images from your local system. Removing them forces the next docker pull to get the image from your repository. \n 3.Use the docker rmi to remove the maryatdocker/docker-whale and docker-whale images. You can use an ID or the name to remove an image.\n ```bash\n $ docker rmi -f 7d9495d03763\n $ docker rmi -f docker-whale\n ```\n 4.Pull and load a new image from your repository using the docker run command. The command you type should include your username form Docker Hub.\n ```bash\n docker run yourusername/docker-whale\n ```\n Since the image is no longer available on your local system, Docker downliads it.\n ```bash\n $ docker run maryatdocker/docker-whale\n Unable to find image 'maryatdocker/docker-whale:latest' locally\n latest: Pulling from maryatdocker/docker-whale\n eb06e47a01d2: Pull complete\n c81071adeeb5: Pull complete\n 7d9495d03763: Already exists\n e9e06b06e14c: Already exists\n a82efea989f9: Already exists\n 37bea4ee0c81: Already exists\n 07f8e8c5e660: Already exists\n 676c4a1897e6: Already exists\n 5b74edbcaa5b: Already exists\n 1722f41ddcb5: Already exists\n 99da72cfe067: Already exists\n 5d5bd9951e26: Already exists\n fb434121fc77: Already exists\n Digest: sha256:ad89e88beb7dc73bf55d456e2c600e0a39dd6c9500d7cd8d1025626c4b985011\n Status: Downloaded newer image for maryatdocker/docker-whale:latest\n  ________________________________________\n / Having wandered helplessly into a      \\\n | blinding snowstorm Sam was greatly     |\n | relieved to see a sturdy Saint Bernard |\n | dog bounding toward him with the       |\n | traditional keg of brandy strapped to  |\n | his collar.                            |\n |                                        |\n | \"At last,\" cried Sam, \"man's best      |\n \\ friend -- and a great big dog, too!\"   /\n  ----------------------------------------\n                 \\\n                  \\\n                   \\\n                           ##        .\n                     ## ## ##       ==\n                  ## ## ## ##      ===\n              /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n         ~ {~ ~ ~ ~ ~  /  ===- ~~\n              \\____ o          /\n               \\    \\        __/\n                 \\____\\______/\n```\n#Where to go next\nYou'have done a lot, you've done all of the following fundamental Docker tasks.\n\n1.installed Docker\n2.run a software image in a container\n3.located an interestng image on Docker Hub\n4.run the image on your own machine\n5.modified an image to create your own and run it\n6.create a Docker Hub account and repository\n7.pushed your image to Docker Hun for others to share.  \n","tags":["reprinted","Technology"]},{"title":"Get Started with Docker","url":"/2016/07/15/GetStartedWithDocker/","content":"\nThis is a tutorial for non-technial users who are interested in learning more about Docker. By following these\nsteps, you'll learn fundamental Docker features while through some simple tasks.\n\nDepending on how you got here, you may or may not have already downloaded Docker for your platform and installed it.\n\n##Get Docker?\nIf you haven't yet downloaded Docker for your platform or installed it, go to [Get Docker](https://docs.docker.com/engine/getstarted/step_one/#step-1-get-docker).\n\n<!-- more --> \n##Ready to start working with Docker?\nIf you have already downloaded and installed Docker, you are ready to run Docker commands! Go to [Verify your installation](https://docs.docker.com/engine/getstarted/step_one/#step-3-verify-your-installation).\n\n#What you'll learn and do\nYou will learn how to:\n\n1.install Docker softwore for your platform\n2.run a software image in a container\n3.browse for an image on Docker Hub\n4.create your own image and run it in a container\n5.create a Docker Hub account and an image repository\n6.create an image of your own\n7.push your image to Docker Hub for others use\n\nThe getting started was user tested to reduce the chance of users having problems. For the best chance of success, follow the steps as written the fiest\ntime before exploring on your own. It takes approximately 45 minutes to complete.\n\n##Flavors of Docker\nThis tutorial is designed as a getting started with Docker, and works the same whether you are using Docker for Mac, Docker for Windows, Docker for Linux,\nor Docker ToolBox(for older MAc and Windows systems).\n\nIf you are using Docker Toolbox, you can use the Docker Quickstart Terminal to run Docker commands in a prebackground, and you standard command line terminal is already set up to run Docker commands.\n\n##How much command line savvy do I nedd?\nThe getting started tour uses Docker Engine CLI commands entered on the command line of a terminal window. You don't need to be a wizard at the command line, but you should be familiar with how to open your favorite shell or termanal, and run basic commands in that environment. It helps (but isn't rquired)\nto konw how to navigate a directory tree, manipilate files, list running process, and so forth.\n\n\n##Find and tun the whalesay image\nPeople all over the world create Docker images. You can find these images by browsing the Docker Hub. In this next section, you'll search for and find the \nimage you'll use in the rest of this getting started.\n\n#Step 1: Locate the whalesay image\n1.Open your browser and browse to the Docker Hub.\nThe Docker Hub contains images from individuals like you and official images from organizations like RedHat, IBM, Google, and a whole lot more.\n\n2.Enter the word 'whalesay' in the search bar.\n\n3.Click on the docker/whalesay image in the results.\nThe browser displays the repository for the shalesay image.\n\nEach image repository contains information about an image. It should include information such as what kind of softwore the image contains and how to use it. You may notice that the whalesay image is based on l Linux distribution called Ubuntu. In the next step, you run the whalesay image on your machine.\n\n#step 2: Run the whalesay image\nMake sure Docker is running. On Docker for Mac and Docker for Windows, this is indicated by the Docker whale showing in the status bar.\n\n1.Open a command-line terminal\n\n2.Type the ' docker run docker/whalesay/ cowsay boo ' command and press RETURN\n  This command runs the whalesay image in a container. Your terminal should look like the following:\n ```bash\n $ docker run docker/whalesay cowsay boo\n Unable to find image 'docker/whalesay:latest' locally\n latest: Pulling from docker/whalesay\n e9e06b06e14c: Pull complete\n a82efea989f9: Pull complete\n 37bea4ee0c81: Pull complete\n 07f8e8c5e660: Pull complete\n 676c4a1897e6: Pull complete\n 5b74edbcaa5b: Pull complete\n 1722f41ddcb5: Pull complete\n 99da72cfe067: Pull complete\n 5d5bd9951e26: Pull complete\n fb434121fc77: Already exists\n Digest: sha256:d6ee73f978a366cf97974115abe9c4099ed59c6f75c23d03c64446bb9cd49163\n Status: Downloaded newer image for docker/whalesay:latest\n  _____\n < boo >\n  -----\n     \\\n      \\\n       \\\n                     ##        .\n               ## ## ##       ==\n            ## ## ## ##      ===\n        /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n   ~ {~ ~ ~ ~ ~  /  ===- ~~\n        \\____ o          /\n         \\    \\        __/\n           \\____\\______/\n\n``` \nThe first time you run a software image, the docker command looks for it on your local system. If the image isn't there, then docker gets\nit from the hub.\n\n3.While still in the command line terminal, type docker images command and press RETURN. The command lists all the images on your local system.\nYou should see docker/whalesay in the list.\n```bash\n$ docker images\n REPOSITORY           TAG         IMAGE ID            CREATED            SIZE\n docker/whalesay      latest      fb434121fc77        3 hours ago        247 MB\n hello-world          latest      91c95931e552        5 weeks ago        910 B\n ```\n When you run an image in a container, Docker downloads the image to your computer. This local copy of the image saves your time. Docker only\n downloads the image again if the image's source changes on the hub. You can, of course, delete the image yourself. You'll learrn more about \n that later. Let's leave the image there for now because we are going to use it later.\n\n 4.Take a moment to play with the whalesay container a bit.\n Try running the whalesay image again with a word or phrase. Try a long or short phrase. Can you break the cow?\n\n ```bash\n $ docker run docker/whalesay cowsay boo-boo\n  _________\n < boo-boo >\n  ---------\n     \\\n      \\\n       \\\n                     ##        .\n               ## ## ##       ==\n            ## ## ## ##      ===\n        /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n   ~ {~ ~ ~ ~ ~  /  ===- ~~\n        \\____ o          /\n         \\    \\        __/\n           \\____\\______/\n```\n\n##Build your own image\nThe whalesay image could be improved. It could be nice if you didn't have to think of something to say. And you type a lot of to get whalesay to talk.\n```bash\ndocker run docker/whalesay/ cowsay boo-boo\n```\nIn this next section, you will improve the whalesay image by building a new version that \"talks on its own\" and requires fewer words to run.\n\n#step 1: Write a Dockerfile\nIn this step, you use your favorite text editor to write a short Dockerfile. A Dockerfile describes the software that is \"backed\" into the image. It isn't\njust ingredients thought, it can tell the software what enviroment to use or what commands to run. Your recipe is going to be very short.\n\n1.Go back to your command terminal window.\n2.Make a new directory by typing ' mkdir mydockerbuild ' and pressing RETURN.\n```bash\n$ mkdir mydockerbuild\n```\nThis directory serves as the \"context\" for your build. The context just means it contains all the things you need to build your image.\n3.change to your new directory.\n```bash\ncd mydockerbuild\n```\nRight now the directory is empty.\n4.Create Dockerfile in the directory by typing 'touch Dockerfile' and pressing RETURN.\n```bash\ntouch Dockerfile\n```\nThe command appears to do nothing but it actually creates the Dockerfile in the current directory. Just type 'ls' to see it.\n```bash\n$ ls\nDockerfile\n```\n5.Open the Dockerfile in a visual text editor like Atom or Submit, or a text based editor like vi, or nano.\n6.Add a line to the file like this:\n```bash\nFROM docker/whalesay:lastest\n```\nThe FROM keyword tells Docker which image your image is based on. Whalesay is cute and has the cowsay problem already, so we'll start there.\n7.Now, add the fortunes problems to the image.\n```bash\nRUN apt-get -y update && apt-get install -y fortunes\n```\nThe fortunes program has a command that prints out wise sayings for our whale to say. So the first step is to install it. This line install the \nsoftware into the image.\n8.Once the image has the softwore it needs, you instruct the softwore to run when the image is loaded.\n```bash\nCMD /usr/games/fortune -a | cowsay\n```\nThis line tells the fortune pogram to pass a nifty quote to the cowsay program.\n9.Check your work, your file should look like this:\n```bash\nFROM docker/whalesay:latest\nRUN apt-get -y update && apt-get install -y fortunes\nCMD /usr/games/fortune -a | cowsay\n```\n10.Save and close your Dockerfile\nAt this point, you have all your softwore ingredients and behaviors described in a Dockerfile. You are ready to build a new image.\n\n#step 2:Build an image from your Dockerfile\n1.At the command line, make sure the Dockerfile is in the current directory bu typing cat Dockerfile.\n\n```bash\n$ cat Dockerfile\nFROM docker/whalesay:latest\n\nRUN apt-get -y update && apt-get install -y fortunes\n\nCMD /usr/games/fortune -a | cowsay\n```\n2.Now, build your new image by typing the 'docker build -t docker-whale' command in your terminal\n(don't forget the .period).\n\n```bash\n$ docker build -t docker-ehale\nSending build context to Docker daemon 2.048 kB\n...snip...\nRemoving intermediate container a8r6faa88df3\nsuccessful build 7d9495d03763\n```\n\nThe command takes several seconds to run and reports its outcome. Before you do anything with the new image, take a minute to learn about the DOckerfile build process.\n\n#step 3:Learn about the build process\nThe docker build -t docker-whale command takes the Dockerfile in the current directory, and builds an image called docker-whale on your local machine. The command takes about a minute and its output looks really long and complex. In this section, you learn what each message means.\n\nFirst Docker checks to make sure it has everything it needs to build.\n```bash\nSending build context to Docker daemon 2.048 kB\n```\nThen, Docker loads with the whalesay image. It already has this image locally as you might recall from the last page. So, Docker doesn't need to download it.\n```bash\nStep 1: From docker/whalesay:latest\n  ---> fb434121fc77\n```\nDocker moves onto the next step which is to update the apt-get package manager. This takes a lot of lines, no need to list them all again here.\n```bash\nStep 2: RUN apt-get -y update && apt-get install -y fortunes\n ---> Running in 27d224dfa5b2\n Ign http://archive.ububtu.com trusty InRelease\n Ign http://archive.ubuntu.com trusty-updates InRelease\n Ign http://archive.ubuntu.com trust-security Inrelease\n Hit http://archive.ubuntu.com trusty Release.apg\n ....snip...\n Get:15 http://archive.ubuntu.com trusty-security/restricted amd64 Packegs [14.8 kB]\n Get:16 http://archive.ubuntu.com trusty-security/universe amd64 Packeges [134 kB]\n Reading packegs lists...\n ---> eb06e47a01d2\n Then, Docker install the new fortunes software.\n ```bash\n Reading packegs lists...\n Building dependency tree...\n Reading state information...\n The following extra packegs will be installed:\n  fortune-mod fortunes-min librecode0\nSuggested packegs:\n  x11-utils bsdmainutils\nThe following NEW packegs will be installed:\n  fortune-mod fortunes fortunes-min librecode0\n0 upgraded, 4 newly installed, 0 to remove and 3 not upgraded.\nNeed to get 1961 kB of archives.\nAfter this operation, 4817 kB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu/trusty/main librecode0 amd64 3.6-21 [771 kB]\n...snip....\nSetting up fortunes (1:1.99.1-7)\nProcessing triggers for libc-bin (2.19-0ubuntu6.6)...\n  ---> c81071adeeb5\nRemoving intermediate container 23aa52c1987c\n```\nFinally. Docker finishes the build and reports its outcome.\n```bash\nStep 3: CMD /usr/games/fortune -a | cowsay\n  ---> Running in a8e6faa88df3\n  ---> 7d9495d03763\nRemoving intermediate container a8e6faa88df3\nSuccessfully build 7d9495d03763\n```\n\n#Step 4:Run your new docker-whale\nIn this step, you verify the new images is on your computer and then you run your new image.\n\n1.Open a command line terminal.\n2.Type docker images and press RETURN.\n  This command, you might remember, lists the images you have locally.\n```bash\n$ docker images\nREPOSITORY            TAG          IMAGE  ID          CREATED            SIZE\ndocker-whale          latest       7d9495d03763       4 minutes ago      273.7 MB\ndocker-whalesay       latest       fb434121fc77       4 minutes ago      247 MB\nhello-world           latest       91c95931e552       4 minutes ago      910 b\n```\n\n3.Run your new image by typing 'docker run docker-whale' and pressing RETURN.\n```bash\n$ docker run docker-whale\n  _________________________________________\n / \"He was a modest, good-humored boy. It  \\\n \\ was Oxford that made him insufferable.\" /\n  -----------------------------------------\n           \\\n            \\\n             \\\n                           ##        .\n                     ## ## ##       ==\n                  ## ## ## ##      ===\n              /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===\n         ~ {~ ~ ~ ~ ~  /  ===- ~~\n              \\____ o          /\n               \\    \\        __/\n                 \\____\\______/\n```\nAs you can see, you've made the whale a lot smarter. It finds its own things to say and the cammand line is a lot shorter! You may also notice that Docker didn't have to download anything.\nThat is because the image was build locally and is already available.\n\n#Where to go next\nOn this page, you learned to build an image bu writing yout own Dockerfile. You ran your image in a cotainer. You also just used Linux from your Mac yes again. In the next section, you take the first step in sharing your image by [creating a Docker Hub account](https://docs.docker.com/engine/getstarted/step_five/).\n\n\n\n\n\n\n\n","tags":["reprinted","Technology"]},{"title":"Docker for Mac vs. Docker Toolbox","url":"/2016/07/13/DockerForMac/","content":"\nIf you already have an installation of Docker Toolbox, please read these topics first to learn \nhow Docker for Mac and Docker Toolbox differ, and how they can coexist.\n\n\n###The Docker Toolbox environment\n\n<!-- more --> \nDocker Toolbox installs docker, docker-compose and docker-machine in /usr/local/bin on your Mac.\nIt also installs VirtualBox. At installation time, Toolbox uses docker-machine to provision a VirtualBox\nVM called default, running the boot2docker Linux distribution, with Docker Engine with certificates located \non your Mac at $HOME/.docker/machine/machines.default.\n\nBefore you use docker or docker-compose on your Mac, you typically use the command eval $(docker-machine env default)\nto set environment variables so that docker or docker-compose know how to talk to Docker Engine running on VirtuaBox.\n\n###The Docker for Mac environment\n\nDocker for Mac is a native application, that you install in /Applications. At installation time, it creats symlinks\nin /usr/local/bin for docker-compose, to the version of the commands inside the Mac application bundle, in /Applications/Docker.app/\nContents/Resources/bin.\n\nHere are some key points to know about Docker for Mac before you get started:\n\n1.Docker for Mac does not use VirtualBox, but rather [HyperKit](https://github.com/docker/HyperKit/), a lightweight \nmacOS virtualization solutin build on top of Hypervisor.framework in macOS 10.10 Yosemite and higher.\n\n2.Installing Docker for Mac does not affect machines you create with Docker Machine. The install offers to copy containers\nand images from your local default machine (if one exists) to the new Docker for Mac HyperKit VM. If chosen, content from \ndefault is copied to the new Docker for Mac HyperKit VM, and your original default machine is kept as is.\n\n3.The Docker for Mac application does not use docker-machine to provision that VM; but rather creates and manages it directly.\n\n4.At installation time, Docker for Mac provisions an HyperKit VM based on Alpine Linux, running Docker Engine. It exposes the \ndocker API on a socket in /var/tmp/docker.sock. Since this is the default location where docker will look if no ecvironment\nvariables are set, you can start using docker and docker-compose without setting any environment variables.\n\nWith Docker for Mac, you can get only one VM, and you don't manage it. It is managed by the Docker for Mac application, which\nincludes autoupdate to update the client and server versions of Docker.\n\nIf you need several VMs and want to manage the version of the Docker client or server you are using, you can continue to use docker-machine,\non the same machine, as described in [Docker Toolbox and Docker for Mac coexitence](https://docs.docker.com/docker-for-mac/docker-toolbox/#docker-toolbox-and-docker-for-mac-coexistence).\n\n\n###Setting up to run Docker for Mac\n\n1.Check whether Toolbox DOCKER environment variable are set:\n\n``` bash\n$ env | grep DOCKER\nDOCKER_HOST=tccp://192.168.99.100:2376\nDOCKER_MACHINE_NAME=default\nDOCKER_TLS_VERIFY=1\nDOCKER_CERT_PATH=/Users/victoriabialas/.docker/machine/machines/default\n```\nIf this command returns no output, you are ready to use Docker for Mac.\nIf it return output(as show in the example), you need to unset the DOCKER environment variables\nto make the client talk the Docker for Mac Engine(next step).\n\n2.Run the unset command on the following DOCKER environment variables to unset them in the current shell.\n\n``` bash\nunset DOCKER_TLS_VERIFY\nunset DOCKER_CERT_PATH\nunset DOCKER_MACHINE_NAME\nunset DOCKER_HOST\n```\nNow, this command should return no output\n``` bash\n$ env | grep DOCKER\n```\nIf you are using a Bash shell, you can use 'unset ${!DOCKER_*}' to unset all DOCKER environment \nvariables at once.(This will not work in other shells such as .zsh; you will need to each variable individually)\n\nNote: If you have a shell script as part of your profile that sets these DOCKER environment variables automatically each time you open a command window, then you will need to unset these\neach time you want to use Docker for Mac.\n\nWarning: If you install Docker for Mac on a machine where Docker Toolbox is installed, it will replace the docker and docker-compose conmand lines in /usr/local/bin with symlinks to its own versions.\n\n\n###Docker Toolbox and Docker for Mac coexistence\nYou can use Docker for Mac and Docker Toolbox together on the sanme machine. When you want to use Docker for Mac, make sure all DOCKER environment variables are unset. You can do this bash with unset ${!DOCKER_*}. When you want to use one of the VirtualBox VMs you have set with docker-machine, just run a eval $(docker-machine env default) (or the name if the machine you want to target). This will switch the current command shell to talk to the specified Toolbox machine.\n\n\n###Using different versions of Docker tools\nThe coexistence setup works ad is as long as your VirtualBox VMs provisioned with docker-machine run the same version of Docker Engine as Docker for Mac. If you need to user VMs running older versions of Docker Engine, you can use a tool like [Docker Version Manager](https://github.com/getcarina/dvm) to manage several version of docker client. \n\n###How do I uninstall Docker Toolbox\nYou might decide that you do not need Toolbox now that you have Docker for Mac, and want to uninstall it. For details on how to perform a clean uninstall of Toolbox on the Mac, see [How to uninstall Toolbox](https://docs.docker.com/toolbox/toolbox_install_mac/#how-to-uninstall-toolbox) in the Toolbox Mac topics.\n\nReprinted links：https://docs.docker.com/docker-for-mac/docker-toolbox/\n\n","tags":["reprinted","Technology"]},{"title":"Use Mitmproxy to get the data packets","url":"/2016/06/20/Mitmproxy/","content":"\nToday we introduce a good tool for capturing data packets, it's Mitmproxy.\nMitmproxy is an interactive command-line capture tool. It can capture packets and view http and http requests, In addition to view https request it also can intercept and modify the request and response. \nLet's use Mitmproxy in a practical example.\n\n##Install\n\n<!-- more --> \n\n[Mitmproxy official website](https://mitmproxy.org) introduced with the following order to install:\n\n``` bash\npip install mitmproxy\n\n```\nThe actual installation process in my system (macOS Sierra) appeared six module dependency error, \nspecific discussion can be seen [here](https://github.com/pypa/pip/issues/3165).\nAnother problem is the permission error that occurs during the installation process.\nSo finally I'm using the following command to install Mitmproxy:\n\n``` bash\nsudo pip install mitmproxy --ignore-installed six\n\n```\n##Start using\n\nFirst of all, we need mobile phones and computers to connect in the same WiFi environment, then we \nenter the mobile phone Setting -> WLAN, click on the currently connected wifi to enter the detailed settings interface, click manual settings in the http proxy.\n\nFill in the ip address in the server column, ip address through the command 'ifconfig' in the computer terminal to get. The port is filled with 8080, then save the settings.\n\nAfter that we can begin to capture the package. Open the terminal input 'mitmproxy-p 8080' into the capture packet interface.\n\nNow we can only crawl http package. If we want to catch the https package, we also need to do some settings on the phone. Open the Safari browser with iPhone and enter 'mitm. It', select the mobile phone of the current system on the site, install the appropriate certificate, we can crawl the https package.\n\nTake [Pandamen](https://pandamen.herokuapp.com) as an example. We use safari to open the Pandamen on the iPhone. We can see the request for pandamen in the previously opened terminal, we use the up and down keys to select, enter key to view the details, use the Tab key to toggle the top navigation bar and the Q key to exit the detailed interface. In the request, response and detail we can see a lot of interesting information.\n\nWe use Mitmproxy to capture packets in the mobile test of the Special test. We can see the size of the calling API and the time spent, And other points we are interested in:\n\n1. Whether the returned image is compressed.\n2. The size of CSS, JS, png in the html.\n3. Whether the business scenario invoking the redundant API.\n4. Whether in the weakness network the API has been repeated invoking.\n\n....\n\n##Request to intercept\n\nIn addition to these conventional operations, Mitmproxy also has another powerful function: Intercept modification Request and Response.\n\nEnter i in the terminal, then enter ~s and press Enter, we entered the response intercept mode. If we enter\n~q and we just entered the request intercept mode. More commands we can enter '?' To view.\n\nAn orange request means being intercepted, then we press the Enter and enter e  that we can modify the request or response, after modify we press 'a' to release the request, if we want to release all the request just to input A. We can also read the relevant documents in the [official website](http://docs.mitmproxy.org/en/latest/mitmproxy.html).\n\n\n\n\n\n\n\n\n\n","tags":["Technology","Original"]},{"title":"What is unittest and how to write unit testing","url":"/2016/05/29/Unittest/","content":"\nUnit test is used for a module, a function or a class to test their validity.\nWe can write some test case for function abs() to test the validity of it:\n\n\n1.Input a positive number: 1, 3.2 or 0.6. We expect the return value to be the same as the input.\n\n2.Input a negative number: -1, -2,3 or -0.99. We expect the return value to be the opposite of the input.\n\n3.Input 0. We expect to return 0.\n\n<!-- more --> \n\n4.Input non-numeric types, such as None, [], {}. We expect a TypeError to be thrown.\n\nWe put the above test cases into a test module, it's a complete unit test.\nIf the unit test can be passed, which means that we tested this function to work properly.If the unit test does not pass, either the function has a bug, or the test condition is not entered correctly, we need fixes it to make unit tests pass.\n\nWhat are the benefits of unit testing? Imagine if we modified the abs () source code, we only need to run the unit tests again, if the test passed it means our changes to the abs () function does not affect the original behavior. If the test does not pass, it means that our changes have problems, we need to modify the code or modify the test.\n\nNext, we actually write code to illustrate the unit test.\n\n\n## abs.py\n\n``` bash\ndef abs(x):\n\n\tif not isinstance(x, (int, float)):\n\t\traise TypeError('bad operand type')\n\n\tif x >= 0:\n\t\treturn x\n\telse:\n\t\treturn -x\n```\nThis is a python file, which defines an abs () function that takes an absolute value. \n\nOpen Terminal, cd into the folder where the abs.py file is located. Input python and press Enter to enter python's interactive programming environment：\n``` bash\n$ cd /Users/hisoft/Desktop/Unittest\n$ python\nPython 2.7.11 (default, Jan 22 2016, 08:29:18) \n[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\nNow imput the 'import abs' on the Termanal and press to enters the module name abs there.\nWe use abs.abs (-5) to invoking the function in the module to find the absolute value of -5.\nThis part of the python can refer to the [official documents](https://docs.python.org/2.7/tutorial/modules.html).\n``` bash\n>>> import abs\n>>> abs.abs(-5)\n5\n```\n\n## abs_test.py\n\nNow let's write the unit test for the abs function. We use the Python's unittest module, abs_test.py is like this:\n``` bash\nimport unittest\n\nfrom abs import abs\n\nclass UnitTestDemo(unittest.TestCase):\n\n\tdef setup(self):\n\t\tprint('setUp...')\n\n\tdef tearDown(self):\n\t\tprint ('tearDoen...')\n\n\tdef test_case1(self):\n\n\t\tself.assertEqual(abs(1), 1)\n\t\tself.assertEqual(abs(-1), 1)\n\t\tself.assertEqual(abs(0), 0)\n\n\tdef test_case2(self):\n\t\t\n\t\twith self.assertRaises(TypeError):\n\t\t\tabs('1')\n\t\t\t\nif __name__ == '__main__':\n    unittest.main()\n```\nWe need to write a test class When we write unit tests, This is inherited from 'unittest.TestCase'.\nThe test method begins with test, There are test_case1 and test_case2. A method that does not start with test is not considered a test method and will not be executed when tested.\n\n\n##Run the unit test\nNow we can run unit tests. To the end of the abs_test.py with two lines of code：\n``` bash\nif __name__ == '__main__':\n    unittest.main()\n```\nThe two lines of code means that this script has been completed，we can run it directly：\n``` bash\npython abs_test.py\n```\n\nThere are two methods in the unit test script setUp() and tearDown(), They will invoking before and after each test method execute.\n\n\n\n\n\n","tags":["Technology","Original"]},{"title":"Welcome to my blog","url":"/2016/05/26/hello-world/","content":"\nWelcome to Lee! This is my blog where I share my articals about code and sometimes I will put some articles I interested here. I would like to improve my English so some articles will be written in English. It's my [Github Account](https://github.com/JimmyLee05), I put my open source code here. Welcome to contact me by E-mail: nanjun@linanjun.cn\n\n","categories":["Life"]}]