[{"title":"Android 入门教程","url":"/2018/07/23/入门教程/","content":"\n这篇文章总结了我在学习 Android过程中获得的经验、资源和代码。\n用这篇文章作为 Android学习结束的技术文档，自己总结一遍的同时，\n希望能帮到看这篇文档的人。\n\n## 1.基础知识入门\n\n这里首推谷歌的开发者文档，其中部分文档已经有中文版的，读起来很方便。\nhttps://developer.android.com/guide/\n\n也有中文版的 Android官方培训课程，可以对照着谷歌的文档一起看。\nhttp://hukai.me/android-training-course-in-chinese/index.html\n\n看官方文档推荐挑着看，如可以先读\n1.1 建立第一个App ；\n1.2添加ActionBar； \n1.4管理Activity的生命周期；\n1.5 使用Fragment建立动态UI； \n1.6数据保存； \n1.7与其它应用的交互等基础\n这些基础章节的内容看完后，整个Android App的运行机制大概就有了解了，剩下几个大章的文档\n就是各种细节的实现。等需要做哪部分功能的时候，再看相应的文档。\n\n其它的一些资源推荐：\na. 开发Android用的 Java文档\nhttp://www.runoob.com/java/java-methods.html\n现在Android开发可以使用 Java和 Kotlin，考虑到Java使用的广泛性，推荐使用Java来入门Android和\n开发公司的App，Kotlin可以之后开发个人App的时候使用。\n\nb.Android Fragment使用详解\nhttps://juejin.im/post/5a926630f265da4e8c45264e\n通过这篇文章可以了解下 Fragment和它的生命周期内容\n\nc.Android 的 mvp分层架构\nhttp://www.androidchina.net/8195.html\n了解下 Android的mvp架构，先有个印象。\n\nd.Android的按键消息分发机制\nhttps://www.jianshu.com/p/0c80cdb37af8\n通过这篇文章可以了解Android的按键消息分发机制，了解App在按键过程中的运行流程。\n\ne.记7月份Android面试感想\nhttps://juejin.im/post/5b67ca1c518825625529b2fb\n常见的Android面试题，面试中能问到的Android问题都是比较经典的，通过面试的问题\n来学习Android 中一些重要的知识点。\n\n### 说明：\n在上面分享 Android基础知识的资源，官方文档挑着看完之后就应该写代码了，\n首先根据官方文档先写出一个简单的App，之后再写稍微复杂一点的App。\n其它推荐的资源是边写代码有疑问的时候看的。\n不要等全部资料看完了再写代码，需要注意这个顺序。\n\n### 注意:\n\n上面的一些教程默认是翻墙的环境，并安装好了 Android Studio\n\n同步Android Studio过程中的大部分问题都与网络有关，搞定网络问题(翻墙)就解决了一大半问题。\n\n关于Android Studio的资料：\nhttp://wiki.jikexueyuan.com/project/android-studio-guide/\n\n## 2.Android代码实践\n完成了上面的基础教程，下一步就准备写代码。\n(看别人的源码理解太浅，要自己写才能发现实际的问题）\n\n这里给出一个实际的很简单的需求：\n\n新开封的盒装牛奶和放在咖啡机里的牛奶容易过期，现在做\n一个Android App来记录开牛奶和往咖啡机里加牛奶的时间，\n并显示当前的日期，能让看的人知道当前的牛奶是否过期了。\n\n分析：\n1.需要两个Button，点击后可以再两个对应的Label上显示当前\n的日期和时间，精确到秒。\n2.还有一个Label来显示当前的实时时间。\n3.UI自己设计，能做的美观大方最好。\n\n通过分享可以知道这是一个很简单的AndroidA pp，尝试自己来完成。\n\n这里有开源的App，可以参考着写：\nhttp://gitlab.mynt.com/NanJun/MilkCoffee","tags":["原创","技术"],"categories":["开发"]},{"title":"What is unittest and how to write unit testing","url":"/2016/05/29/Unittest/","content":"\nUnit test is used for a module, a function or a class to test their validity.\nWe can write some test case for function abs() to test the validity of it:\n\n\n1.Input a positive number: 1, 3.2 or 0.6. We expect the return value to be the same as the input.\n\n2.Input a negative number: -1, -2,3 or -0.99. We expect the return value to be the opposite of the input.\n\n3.Input 0. We expect to return 0.\n\n<!-- more --> \n\n4.Input non-numeric types, such as None, [], {}. We expect a TypeError to be thrown.\n\nWe put the above test cases into a test module, it's a complete unit test.\nIf the unit test can be passed, which means that we tested this function to work properly.If the unit test does not pass, either the function has a bug, or the test condition is not entered correctly, we need fixes it to make unit tests pass.\n\nWhat are the benefits of unit testing? Imagine if we modified the abs () source code, we only need to run the unit tests again, if the test passed it means our changes to the abs () function does not affect the original behavior. If the test does not pass, it means that our changes have problems, we need to modify the code or modify the test.\n\nNext, we actually write code to illustrate the unit test.\n\n\n## abs.py\n\n\tdef abs(x):\n\n\t\tif not isinstance(x, (int, float)):\n\t\traise TypeError('bad operand type')\n\n\t\tif x >= 0:\n\t\t\treturn x\n\t\telse:\n\t\t\treturn -x\n\nThis is a python file, which defines an abs () function that takes an absolute value. \n\nOpen Terminal, cd into the folder where the abs.py file is located. Input python and press Enter to enter python's interactive programming environment：\n\n\t$ cd /Users/hisoft/Desktop/Unittest\n\t$ python\n\tPython 2.7.11 (default, Jan 22 2016, 08:29:18) \n\t[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin\n\tType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\nNow imput the 'import abs' on the Termanal and press to enters the module name abs there.\nWe use abs.abs (-5) to invoking the function in the module to find the absolute value of -5.\nThis part of the python can refer to the [official documents](https://docs.python.org/2.7/tutorial/modules.html).\n\n\t>>> import abs\n\t>>> abs.abs(-5)\n\t5\t\n\n\n## abs_test.py\n\nNow let's write the unit test for the abs function. We use the Python's unittest module, abs_test.py is like this:\n\n\timport unittest\n\n\tfrom abs import abs\n\n\tclass UnitTestDemo(unittest.TestCase):\n\n\t\tdef setup(self):\n\t\t\tprint('setUp...')\n\n\t\tdef tearDown(self):\n\t\t\tprint ('tearDoen...')\n\n\t\tdef test_case1(self):\n\n\t\t\tself.assertEqual(abs(1), 1)\n\t\t\tself.assertEqual(abs(-1), 1)\n\t\t\tself.assertEqual(abs(0), 0)\n\n\t\tdef test_case2(self):\n\t\t\n\t\t\twith self.assertRaises(TypeError):\n\t\t\t\tabs('1')\n\t\t\t\n\tif __name__ == '__main__':\n    \tunittest.main()\n\nWe need to write a test class When we write unit tests, This is inherited from 'unittest.TestCase'.\nThe test method begins with test, There are test_case1 and test_case2. A method that does not start with test is not considered a test method and will not be executed when tested.\n\n\n##Run the unit test\nNow we can run unit tests. To the end of the abs_test.py with two lines of code：\n\n\tif __name__ == '__main__':\n    \tunittest.main()\n\nThe two lines of code means that this script has been completed，we can run it directly：\n\n\tpython abs_test.py\n\n\nThere are two methods in the unit test script setUp() and tearDown(), They will invoking before and after each test method execute.\n\n\n\n\n\n","tags":["原创","技术"],"categories":["开发"]}]